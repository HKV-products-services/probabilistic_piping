[
  {
    "objectID": "examples/notebooks/introduction.html",
    "href": "examples/notebooks/introduction.html",
    "title": "Introduction to probabilistic piping",
    "section": "",
    "text": "In this notebook, a barebones example is given on how to create a piping fragility curve using an Excel file as input for the ProbPipingFixedWaterlevel class.\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom probabilistic_piping import ProbInput, ProbPipingFixedWaterlevel"
  },
  {
    "objectID": "examples/notebooks/introduction.html#creating-input-data",
    "href": "examples/notebooks/introduction.html#creating-input-data",
    "title": "Introduction to probabilistic piping",
    "section": "Creating input data",
    "text": "Creating input data\nProbabilistic calculations expect an instance of ProbInput. A practical way of making this ProbInput instance is from a specially crafted Excel sheet.\n\ndata_path = Path(\"../../../test/data/full_test.xlsx\")\ndf_input = pd.read_excel(data_path, sheet_name=\"input\", index_col=0, header=0)\ndf_input.head(3)\n\n\n\n\n\n\n\n\nBeschrijving\nWaarde\nKansverdeling\nVerschuiving\nMean\nSpreiding\nSpreidingstype\nAfknot_links\nAfknot_rechts\nMin\nStep\nMax\nStDev\n\n\nNaam\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\nD -- Dikte pipinggevoelige zandlaag (aquifer) [m]\n4.44234\nLognormaal\n0.0\n9.000000\n0.50\nStandaardafwijking\nNaN\nNaN\nNaN\nNaN\nNaN\n0.500000\n\n\nD_cover\nD_cover -- Dikte (cohesieve) deklaag in [m]\n3.12096\nLognormaal\n0.0\n4.000000\n0.50\nStandaardafwijking\nNaN\nNaN\nNaN\nNaN\nNaN\n0.500000\n\n\nd_70\nd_70 -- 70% kwantiel korrelgrootte van pipingg...\n0.0\nLognormaal\n0.0\n0.000161\n0.12\nVariatiecoëfficiënt\nNaN\nNaN\nNaN\nNaN\nNaN\n0.000019\n\n\n\n\n\n\n\nThe Excel data is converted to a ProbInput instance using the classmethod from_dataframe(). The ProbInput class has a number of attributes: params, stochasts, charvals, calc_options and hlist.\nDepending on the type of calculation, not all options need to be set.\n\ninp_data = ProbInput.from_dataframe(df_input)\n\nparams are deterministic (fixed) variables\n\ninp_data.params\n\n{'d_70m': 0.000208,\n 'g': 9.81,\n 'gamma_water': 10,\n 'r_c': 0.3,\n 'v': 1.33e-06,\n 'gamma_sp': 16.19,\n 't_norm': 300}\n\n\nstochasts are stochastic variables\n\ninp_data.stochasts\n\n{'D': class=LogNormal name=LogNormal dimension=1 muLog=2.19568 sigmaLog=0.0555128 gamma=0,\n 'D_cover': class=LogNormal name=LogNormal dimension=1 muLog=1.37854 sigmaLog=0.124516 gamma=0,\n 'd_70': class=LogNormal name=LogNormal dimension=1 muLog=-8.74125 sigmaLog=0.119571 gamma=0,\n 'eta': class=LogNormal name=LogNormal dimension=1 muLog=-1.30934 sigmaLog=0.00370369 gamma=0,\n 'gamma_sat': class=LogNormal name=LogNormal dimension=1 muLog=1.93859 sigmaLog=0.120984 gamma=10,\n 'h_exit': class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[-1.5] sigma=class=Point name=Unnamed dimension=1 values=[0.1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1],\n 'i_ch': class=LogNormal name=LogNormal dimension=1 muLog=-0.712758 sigmaLog=0.198042 gamma=0,\n 'k': class=LogNormal name=LogNormal dimension=1 muLog=-9.05833 sigmaLog=0.246221 gamma=0,\n 'L': class=LogNormal name=LogNormal dimension=1 muLog=4.75131 sigmaLog=0.0332908 gamma=0,\n 'm_p': class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[1] sigma=class=Point name=Unnamed dimension=1 values=[0.08] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1],\n 'm_u': class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[1] sigma=class=Point name=Unnamed dimension=1 values=[0.1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1],\n 'r_exit': class=LogNormal name=LogNormal dimension=1 muLog=-0.228119 sigmaLog=0.0997513 gamma=0,\n 'theta': class=LogNormal name=LogNormal dimension=1 muLog=3.61092 sigmaLog=0.00027027 gamma=0}\n\n\ncharvals are characteristic values of the stochastic variables\n\ninp_data.charvals\n\n{'D': 4.44234,\n 'D_cover': 3.12096,\n 'd_70': 1.88016e-07,\n 'eta': 0.282277,\n 'gamma_sat': 13.4991,\n 'h_exit': 0.0996889,\n 'i_ch': 0.22333,\n 'k': 4.75458e-09,\n 'L': 88.0597,\n 'm_p': 0.996009,\n 'm_u': 0.994455,\n 'r_exit': 0.793916,\n 'theta': 42.8826,\n 'h': 5.0}\n\n\ncalc_options are options to be used in specific probabilistic methods\n\ninp_data.calc_options\n\n{'Rekentechniek': 'FORM AbdoRackwitz',\n 'FORM start': 'mean',\n 'MaximumAbsoluteError': 0.01,\n 'MaximumRelativeError': 0.01,\n 'MaximumResidualError': 1e-05,\n 'MaximumConstraintError': 0.01,\n 'MaximumIterationNumber': 100,\n 'MaximumEvaluationNumber': 1000000000,\n 'MaximumCoefficientOfVariation': 0.1,\n 'BlockSize': 1000,\n 'MaximumOuterSampling': 1000}\n\n\nhlist is a range of water levels\n\nnp.array(inp_data.hlist)\n\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,\n        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,\n        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,\n        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,\n        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,\n        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,\n        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,\n        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,\n        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,\n        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,\n       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,\n       12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13. , 13.1,\n       13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14. , 14.1, 14.2,\n       14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15. , 15.1, 15.2, 15.3,\n       15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16. , 16.1, 16.2, 16.3, 16.4,\n       16.5, 16.6, 16.7, 16.8, 16.9, 17. , 17.1, 17.2, 17.3, 17.4, 17.5,\n       17.6, 17.7, 17.8, 17.9, 18. , 18.1, 18.2, 18.3, 18.4, 18.5, 18.6,\n       18.7, 18.8, 18.9, 19. , 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7,\n       19.8, 19.9, 20. ])"
  },
  {
    "objectID": "examples/notebooks/introduction.html#running-a-fragility-curve-calculation",
    "href": "examples/notebooks/introduction.html#running-a-fragility-curve-calculation",
    "title": "Introduction to probabilistic piping",
    "section": "Running a fragility curve calculation",
    "text": "Running a fragility curve calculation\nFrom this input data, we can now create a probabilistic piping calculation for a fixed water level. Fragility curves can be created for the submechanisms of heave, uplift, sellmeijer or the combination of the former as the mechanism combi.\nIn this example, a fragility curve is calculated for the combined mechanism. Furthermore, all stochasts are assumed to be independent (copula=None).\n\nprob = ProbPipingFixedWaterlevel(progress=False)\n_, pc = prob.fixed_waterlevel_fragilitycurve(inp_data, z_type=\"combi\", copula=None)\n\nThe results variable contains a list of ProbResult instances. A ProbResult is created for each water level, as each water level is a separate probabilistic calculation. A ProbResult instance contains detailed information of such probabilistic calculation.\n\npc.results[-1]\n\nProbResult(h=20.0, prob_cond=1.0, converged=True, z_val=-0.008833492209245453, physical_design={'D': 8.986143178848712, 'D_cover': 6.582844953831219, 'd_70': 0.00015985317099639446, 'eta': 0.2699981481671999, 'gamma_sat': 16.948956640465564, 'h_exit': -1.484810143498153, 'i_ch': 1.8689020278023638, 'k': 0.00011641710001743983, 'L': 115.7358486166931, 'm_p': 1.0, 'm_u': 1.0, 'r_exit': 0.5753293471052043, 'theta': 36.99999864864872}, standard_design={'D': 0.0, 'D_cover': 4.063136676688446, 'd_70': 0.0, 'eta': 0.0, 'gamma_sat': 0.0, 'h_exit': 0.15189856501846832, 'i_ch': 6.756684392079229, 'k': 0.0, 'L': 0.0, 'm_p': 0.0, 'm_u': 0.0, 'r_exit': -3.2550328765482837, 'theta': 0.0}, importancefactors={'D': -0.0, 'D_cover': -0.4762718147944334, 'd_70': -0.0, 'eta': -0.0, 'gamma_sat': -0.0, 'h_exit': -0.017805210846359977, 'i_ch': -0.792003467634163, 'k': -0.0, 'L': -0.0, 'm_p': -0.0, 'm_u': -0.0, 'r_exit': 0.3815476905376247, 'theta': -0.0}, functionevals=45, mechanism='combi')"
  },
  {
    "objectID": "examples/notebooks/introduction.html#visualizing-the-calculated-fragility-curve",
    "href": "examples/notebooks/introduction.html#visualizing-the-calculated-fragility-curve",
    "title": "Introduction to probabilistic piping",
    "section": "Visualizing the calculated fragility curve",
    "text": "Visualizing the calculated fragility curve\nUsing the result object, the fragility curve can be visualized using the water levels and the conditional probabilities.\n\nfig, ax = plt.subplots()\nax.plot([r.h for r in pc.results], [r.prob_cond for r in pc.results])\nax.set_xlabel(\"Water level [m]\")\nax.set_ylabel(\"Failure probability\");"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html",
    "href": "examples/notebooks/prob_methods.html",
    "title": "Applying various probabilistic methods",
    "section": "",
    "text": "In the following, the application of a number of available probabilistic methods is shown using similar input.\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom probabilistic_piping import ProbInput, ProbPipingFixedWaterlevel"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html#input",
    "href": "examples/notebooks/prob_methods.html#input",
    "title": "Applying various probabilistic methods",
    "section": "Input",
    "text": "Input\n\ndata_path = Path(\"../../../test/data/full_test.xlsx\")\ndf_input = pd.read_excel(data_path, sheet_name=\"input\", index_col=0, header=0)\nprob = ProbPipingFixedWaterlevel(progress=False)"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html#form-cobyla",
    "href": "examples/notebooks/prob_methods.html#form-cobyla",
    "title": "Applying various probabilistic methods",
    "section": "FORM Cobyla",
    "text": "FORM Cobyla\n\ndf_coby = df_input.copy()\ndf_coby.loc[\"Rekentechniek\", \"Waarde\"] = \"FORM Cobyla\"\ninp_coby = ProbInput.from_dataframe(df_coby)\n_, r_coby = prob.fixed_waterlevel_failureprobability(inp_coby, h=6.0, z_type=\"combi\")\n\nr_coby.prob_cond\n\n0.0006153617612051806"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html#form-abdorackwitz",
    "href": "examples/notebooks/prob_methods.html#form-abdorackwitz",
    "title": "Applying various probabilistic methods",
    "section": "FORM AbdoRackwitz",
    "text": "FORM AbdoRackwitz\n\ndf_abdo = df_input.copy()\ndf_abdo.loc[\"Rekentechniek\", \"Waarde\"] = \"FORM AbdoRackwitz\"\ninp_abdo = ProbInput.from_dataframe(df_abdo)\n_, r_abdo = prob.fixed_waterlevel_failureprobability(inp_abdo, h=6.0, z_type=\"combi\")\n\nr_abdo.prob_cond\n\n0.0005916558092986312"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html#monte-carlo",
    "href": "examples/notebooks/prob_methods.html#monte-carlo",
    "title": "Applying various probabilistic methods",
    "section": "Monte Carlo",
    "text": "Monte Carlo\n\ndf_mc = df_input.copy()\ndf_mc.loc[\"Rekentechniek\", \"Waarde\"] = \"Monte Carlo\"\ninp_mc = ProbInput.from_dataframe(df_mc)\n_, r_mc = prob.fixed_waterlevel_failureprobability(inp_mc, h=6.0, z_type=\"combi\")\n\nr_mc.prob_cond\n\n0.0005519125683060111"
  },
  {
    "objectID": "examples/notebooks/prob_methods.html#directional-sampling",
    "href": "examples/notebooks/prob_methods.html#directional-sampling",
    "title": "Applying various probabilistic methods",
    "section": "Directional Sampling",
    "text": "Directional Sampling\n\ndf_ds = df_input.copy()\ndf_ds.loc[\"Rekentechniek\", \"Waarde\"] = \"DS MediumSafe OrthogonalDirection\"\ndf_ds.loc[\"MaximumOuterSampling\", \"Waarde\"] = 10_000\ndf_ds.loc[\"BlockSize\", \"Waarde\"] = 1\ninp_ds = ProbInput.from_dataframe(df_ds)\n_, r_ds = prob.fixed_waterlevel_failureprobability(inp_ds, h=6.0, z_type=\"combi\")\n\nr_ds.prob_cond\n\n0.00092463352990222"
  },
  {
    "objectID": "reference/ProbPipingBase.html",
    "href": "reference/ProbPipingBase.html",
    "title": "ProbPipingBase",
    "section": "",
    "text": "ProbPipingBase()\nBase class for probabilistic piping calculations.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingBase.get_FORM_startpoint(distribution, otzfunc, method='slice')\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingBase.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingBase.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ProbPipingBase.html#attributes",
    "href": "reference/ProbPipingBase.html#attributes",
    "title": "ProbPipingBase",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations."
  },
  {
    "objectID": "reference/ProbPipingBase.html#methods",
    "href": "reference/ProbPipingBase.html#methods",
    "title": "ProbPipingBase",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingBase.get_FORM_startpoint(distribution, otzfunc, method='slice')\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingBase.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingBase.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ProbResult.html",
    "href": "reference/ProbResult.html",
    "title": "ProbResult",
    "section": "",
    "text": "ProbResult()\nA class to represent the result of a probabilistic analysis.\nAttributes h : float or None Water level. prob_cond : float Conditional probability of failure. converged : bool Indicates whether the analysis has converged. z_val : float or None Value of the limit state function. physical_design : dict of str to float or None Physical space design point. standard_design : dict of str to float or None Standard space design point. importancefactors : dict of str to float or None Importance factors. functionevals : int Number of function evaluations. mechanism : str or None Type of the limit state function.\n\n\n\n\n\nName\nDescription\n\n\n\n\nconverged\nReturns True when the argument is true, False otherwise.\n\n\nfunctionevals\nint([x]) -&gt; integer\n\n\nh\nThe type of the None singleton.\n\n\nimportancefactors\nThe type of the None singleton.\n\n\nmechanism\nThe type of the None singleton.\n\n\nphysical_design\nThe type of the None singleton.\n\n\nprob_cond\nThe type of the None singleton.\n\n\nstandard_design\nThe type of the None singleton.\n\n\nz_val\nThe type of the None singleton.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nfrom_FORM_result\nCreate a ProbResult from a FORM analysis.\n\n\nfrom_sim_result\nCreate a ProbResult from a simulation analysis.\n\n\n\n\n\nProbResult.from_FORM_result(h, optimAlgo, otzfunc, result, z_type)\nCreate a ProbResult from a FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla\nOptimization algorithm used in the FORM analysis.\nrequired\n\n\notzfunc\not.Function\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nresult\not.FORMResult\nResult of the FORM analysis.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\n\n\n\n\n\nProbResult.from_sim_result(h, algo, otzfunc, distribution, result, z_type)\nCreate a ProbResult from a simulation analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nalgo\not.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nSimulation algorithm used in the analysis.\nrequired\n\n\notzfunc\not.PythonFunction or ot.MemoizeFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\nresult\not.OptimizationResult\nResult of the simulation analysis.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired"
  },
  {
    "objectID": "reference/ProbResult.html#attributes",
    "href": "reference/ProbResult.html#attributes",
    "title": "ProbResult",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nconverged\nReturns True when the argument is true, False otherwise.\n\n\nfunctionevals\nint([x]) -&gt; integer\n\n\nh\nThe type of the None singleton.\n\n\nimportancefactors\nThe type of the None singleton.\n\n\nmechanism\nThe type of the None singleton.\n\n\nphysical_design\nThe type of the None singleton.\n\n\nprob_cond\nThe type of the None singleton.\n\n\nstandard_design\nThe type of the None singleton.\n\n\nz_val\nThe type of the None singleton."
  },
  {
    "objectID": "reference/ProbResult.html#methods",
    "href": "reference/ProbResult.html#methods",
    "title": "ProbResult",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfrom_FORM_result\nCreate a ProbResult from a FORM analysis.\n\n\nfrom_sim_result\nCreate a ProbResult from a simulation analysis.\n\n\n\n\n\nProbResult.from_FORM_result(h, optimAlgo, otzfunc, result, z_type)\nCreate a ProbResult from a FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla\nOptimization algorithm used in the FORM analysis.\nrequired\n\n\notzfunc\not.Function\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nresult\not.FORMResult\nResult of the FORM analysis.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\n\n\n\n\n\nProbResult.from_sim_result(h, algo, otzfunc, distribution, result, z_type)\nCreate a ProbResult from a simulation analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nalgo\not.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nSimulation algorithm used in the analysis.\nrequired\n\n\notzfunc\not.PythonFunction or ot.MemoizeFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\nresult\not.OptimizationResult\nResult of the simulation analysis.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "PipingEquations\nA class containing various static and class methods for performing piping calculations.\n\n\nPipingSettings\nA dataclass to store various settings and parameters related to piping calculations.\n\n\nProbPipingBase\nBase class for probabilistic piping calculations.\n\n\nRelevantStochasts\nDataclass to hold relevant stochastic variables for different types of analyses.\n\n\nProbPipingFixedWaterlevel\nClass for probabilistic piping calculations with a fixed water level.\n\n\nProbPipingFixedWaterlevelSimple\nClass for simple probabilistic piping calculations with a fixed water level.\n\n\nProbInput\nA class to represent probabilistic input data.\n\n\nProbResult\nA class to represent the result of a probabilistic analysis."
  },
  {
    "objectID": "reference/index.html#probabilistic_piping",
    "href": "reference/index.html#probabilistic_piping",
    "title": "API Reference",
    "section": "",
    "text": "PipingEquations\nA class containing various static and class methods for performing piping calculations.\n\n\nPipingSettings\nA dataclass to store various settings and parameters related to piping calculations.\n\n\nProbPipingBase\nBase class for probabilistic piping calculations.\n\n\nRelevantStochasts\nDataclass to hold relevant stochastic variables for different types of analyses.\n\n\nProbPipingFixedWaterlevel\nClass for probabilistic piping calculations with a fixed water level.\n\n\nProbPipingFixedWaterlevelSimple\nClass for simple probabilistic piping calculations with a fixed water level.\n\n\nProbInput\nA class to represent probabilistic input data.\n\n\nProbResult\nA class to represent the result of a probabilistic analysis."
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevel.html",
    "href": "reference/ProbPipingFixedWaterlevel.html",
    "title": "ProbPipingFixedWaterlevel",
    "section": "",
    "text": "ProbPipingFixedWaterlevel()\nClass for probabilistic piping calculations with a fixed water level.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nfixed_waterlevel_failureprobability\nCalculate the failure probability for a fixed water level.\n\n\nfixed_waterlevel_fragilitycurve\nCalculate the fragility curve for a fixed water level.\n\n\nfixed_waterlevel_semiprob\nPerform semi-probabilistic calculations for a constant water level.\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_failureprobability(\n    prob_input,\n    h=None,\n    settings=None,\n    z_type='sellmeijer',\n    copula=None,\n    leave=True,\n)\nCalculate the failure probability for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nz_type\nstr\nType of the limit state function, by default “sellmeijer”.\n'sellmeijer'\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results of the failure probability calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_fragilitycurve(\n    prob_input,\n    hlist=None,\n    settings=None,\n    z_type='sellmeijer',\n    copula=None,\n)\nCalculate the fragility curve for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nhlist\nlist of float or None\nList of water levels, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nz_type\nstr\nType of the limit state function, by default “sellmeijer”.\n'sellmeijer'\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results of the fragility curve calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_semiprob(\n    prob_input,\n    settings=None,\n    h=None,\n)\nPerform semi-probabilistic calculations for a constant water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\nDataFrame containing the results of the calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.get_FORM_startpoint(\n    distribution,\n    otzfunc,\n    method='slice',\n)\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevel.html#attributes",
    "href": "reference/ProbPipingFixedWaterlevel.html#attributes",
    "title": "ProbPipingFixedWaterlevel",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations."
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevel.html#methods",
    "href": "reference/ProbPipingFixedWaterlevel.html#methods",
    "title": "ProbPipingFixedWaterlevel",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfixed_waterlevel_failureprobability\nCalculate the failure probability for a fixed water level.\n\n\nfixed_waterlevel_fragilitycurve\nCalculate the fragility curve for a fixed water level.\n\n\nfixed_waterlevel_semiprob\nPerform semi-probabilistic calculations for a constant water level.\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_failureprobability(\n    prob_input,\n    h=None,\n    settings=None,\n    z_type='sellmeijer',\n    copula=None,\n    leave=True,\n)\nCalculate the failure probability for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nz_type\nstr\nType of the limit state function, by default “sellmeijer”.\n'sellmeijer'\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results of the failure probability calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_fragilitycurve(\n    prob_input,\n    hlist=None,\n    settings=None,\n    z_type='sellmeijer',\n    copula=None,\n)\nCalculate the fragility curve for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nhlist\nlist of float or None\nList of water levels, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nz_type\nstr\nType of the limit state function, by default “sellmeijer”.\n'sellmeijer'\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results of the fragility curve calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.fixed_waterlevel_semiprob(\n    prob_input,\n    settings=None,\n    h=None,\n)\nPerform semi-probabilistic calculations for a constant water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\nDataFrame containing the results of the calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.get_FORM_startpoint(\n    distribution,\n    otzfunc,\n    method='slice',\n)\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevel.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/RelevantStochasts.html",
    "href": "reference/RelevantStochasts.html",
    "title": "RelevantStochasts",
    "section": "",
    "text": "RelevantStochasts()\nDataclass to hold relevant stochastic variables for different types of analyses.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nalgemeen\nlist of str\nGeneral stochastic variables.\n\n\nuplift\nlist of str\nStochastic variables relevant for uplift analysis.\n\n\nheave\nlist of str\nStochastic variables relevant for heave analysis.\n\n\nsellmeijer\nlist of str\nStochastic variables relevant for Sellmeijer analysis.\n\n\ncombi\nlist of str\nCombined stochastic variables for combined analyses."
  },
  {
    "objectID": "reference/RelevantStochasts.html#attributes",
    "href": "reference/RelevantStochasts.html#attributes",
    "title": "RelevantStochasts",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nalgemeen\nlist of str\nGeneral stochastic variables.\n\n\nuplift\nlist of str\nStochastic variables relevant for uplift analysis.\n\n\nheave\nlist of str\nStochastic variables relevant for heave analysis.\n\n\nsellmeijer\nlist of str\nStochastic variables relevant for Sellmeijer analysis.\n\n\ncombi\nlist of str\nCombined stochastic variables for combined analyses."
  },
  {
    "objectID": "reference/PipingSettings.html",
    "href": "reference/PipingSettings.html",
    "title": "PipingSettings",
    "section": "",
    "text": "PipingSettings()\nA dataclass to store various settings and parameters related to piping calculations.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nt_norm\nfloat or np.ndarray\nTerugkeertijd norm voor de berekening (alleen voor semiprob).\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\n\n\nD\nfloat or np.ndarray\nDikte watervoerende laag [m].\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\n\n\nD_vl\nfloat or np.ndarray\nDikte deklaag voorland [m].\n\n\nD_al\nfloat or np.ndarray\nDikte deklaag achterland [m].\n\n\nk\nfloat or np.ndarray\nDoorlatendheid deklaag [m/s].\n\n\nk_vl\nfloat or np.ndarray\nDoorlatendheid voorland [m/s].\n\n\nk_al\nfloat or np.ndarray\nDoorlatendheid achterland [m/s].\n\n\ncv_vl\nfloat or np.ndarray\nconsolidatiecoëfficiënt klei voorland [m^2/s].\n\n\ncv_al\nfloat or np.ndarray\nconsolidatiecoëfficiënt klei achterland [m^2/s].\n\n\nb\nfloat or np.ndarray\nb-waarde in TRWD model 4D (halve breedte rivierbed) [m]\n\n\nn_aq\nfloat or np.ndarray\nPorositeit van de aquifer [-].\n\n\nL\nfloat or np.ndarray\nKwelweglengte [m].\n\n\nL_vl\nfloat or np.ndarray\nLengte voorland [m].\n\n\nL_al\nfloat or np.ndarray\nLengte achterland [m].\n\n\ngamma_sat\nfloat or np.ndarray\nVerzadigd gewicht deklaag, gewogen gemiddelde voor meerdere lagen. [kN/m^3].\n\n\nr_exit\nfloat or np.ndarray\nDempingsfactor bij uitgang (dempingsfactor over de afstand intredepunt-uittredepunt) [-].\n\n\nm_u\nfloat or np.ndarray\nModelfactor uplift [-].\n\n\ni_ch\nfloat or np.ndarray\nKritieke heavegradiënt [-].\n\n\nd_70\nfloat or np.ndarray\n70% kwantiel korrelgrootte van pipinggevoelige zandlaag [m].\n\n\neta\nfloat or np.ndarray\nWhite’s weerstandscoefficient (sleepkrachtfactor, constante van White) [-].\n\n\ntheta\nfloat or np.ndarray\nRolweerstandshoek [graden].\n\n\nd_70m\nfloat or np.ndarray\nGemiddelde waarde korrelgrootte van 70e kwantiel [m].\n\n\ng\nfloat or np.ndarray\nZwaartekrachtversnelling [kN/m^3].\n\n\ngamma_water\nfloat or np.ndarray\nDichtheid water (volumiek gewicht water) [kN/m^3].\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\n\n\nv\nfloat or np.ndarray\nKinematische viscositeit [m^2/s]\n\n\ngamma_sp\nfloat or np.ndarray\nVolumieke dichtheid zand onder water [kN/m^3]\n\n\nkrit_verval_factor\nfloat or np.ndarray\nVermenigvuldigingsfactor voor kritiek verval, by default 1.0.\n\n\nm_p\nfloat or np.ndarray\nModelfactor piping [-].\n\n\nmethode_stijghoogte\nstr\nStijghoogte methode, by default “responsfactor”\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncopy\nCreate a copy of the current PipingSettings object.\n\n\nget_partial_settings\nGet a partial settings object for the i-th slice.\n\n\nget_settings_as_dict\nGet the settings as a dictionary.\n\n\nset_param\nSet a single parameter.\n\n\nset_params_fromdict\nSet parameters from a dictionary.\n\n\nverify_integrity\nVerify the integrity of the parameters by ensuring they are numpy arrays and have consistent sizes.\n\n\n\n\n\nPipingSettings.copy(verify_integrity=True)\nCreate a copy of the current PipingSettings object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after copying, by default True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPipingSettings\nA new instance of PipingSettings with copied parameters.\n\n\n\n\n\n\n\nPipingSettings.get_partial_settings(i, verify_integrity=True)\nGet a partial settings object for the i-th slice.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ni\nint\nThe index of the slice to extract.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after extraction, by default True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPipingSettings\nA new instance of PipingSettings with the i-th slice of parameters.\n\n\n\n\n\n\n\nPipingSettings.get_settings_as_dict()\nGet the settings as a dictionary.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nA dictionary containing the parameter names and their values.\n\n\n\n\n\n\n\nPipingSettings.set_param(attr, val, verify_integrity=True)\nSet a single parameter.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nattr\nstr\nThe name of the attribute to set.\nrequired\n\n\nval\nfloat or np.ndarray\nThe value to set for the attribute.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after setting them, by default True.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the attribute name is unknown.\n\n\n\n\n\n\n\nPipingSettings.set_params_fromdict(piping_dict, verify_integrity=True)\nSet parameters from a dictionary.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npiping_dict\ndict\nDictionary containing parameter names and their values.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after setting them, by default True.\nTrue\n\n\n\n\n\n\n\nPipingSettings.verify_integrity()\nVerify the integrity of the parameters by ensuring they are numpy arrays and have consistent sizes.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf any parameter has more than one dimension."
  },
  {
    "objectID": "reference/PipingSettings.html#attributes",
    "href": "reference/PipingSettings.html#attributes",
    "title": "PipingSettings",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nt_norm\nfloat or np.ndarray\nTerugkeertijd norm voor de berekening (alleen voor semiprob).\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\n\n\nD\nfloat or np.ndarray\nDikte watervoerende laag [m].\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\n\n\nD_vl\nfloat or np.ndarray\nDikte deklaag voorland [m].\n\n\nD_al\nfloat or np.ndarray\nDikte deklaag achterland [m].\n\n\nk\nfloat or np.ndarray\nDoorlatendheid deklaag [m/s].\n\n\nk_vl\nfloat or np.ndarray\nDoorlatendheid voorland [m/s].\n\n\nk_al\nfloat or np.ndarray\nDoorlatendheid achterland [m/s].\n\n\ncv_vl\nfloat or np.ndarray\nconsolidatiecoëfficiënt klei voorland [m^2/s].\n\n\ncv_al\nfloat or np.ndarray\nconsolidatiecoëfficiënt klei achterland [m^2/s].\n\n\nb\nfloat or np.ndarray\nb-waarde in TRWD model 4D (halve breedte rivierbed) [m]\n\n\nn_aq\nfloat or np.ndarray\nPorositeit van de aquifer [-].\n\n\nL\nfloat or np.ndarray\nKwelweglengte [m].\n\n\nL_vl\nfloat or np.ndarray\nLengte voorland [m].\n\n\nL_al\nfloat or np.ndarray\nLengte achterland [m].\n\n\ngamma_sat\nfloat or np.ndarray\nVerzadigd gewicht deklaag, gewogen gemiddelde voor meerdere lagen. [kN/m^3].\n\n\nr_exit\nfloat or np.ndarray\nDempingsfactor bij uitgang (dempingsfactor over de afstand intredepunt-uittredepunt) [-].\n\n\nm_u\nfloat or np.ndarray\nModelfactor uplift [-].\n\n\ni_ch\nfloat or np.ndarray\nKritieke heavegradiënt [-].\n\n\nd_70\nfloat or np.ndarray\n70% kwantiel korrelgrootte van pipinggevoelige zandlaag [m].\n\n\neta\nfloat or np.ndarray\nWhite’s weerstandscoefficient (sleepkrachtfactor, constante van White) [-].\n\n\ntheta\nfloat or np.ndarray\nRolweerstandshoek [graden].\n\n\nd_70m\nfloat or np.ndarray\nGemiddelde waarde korrelgrootte van 70e kwantiel [m].\n\n\ng\nfloat or np.ndarray\nZwaartekrachtversnelling [kN/m^3].\n\n\ngamma_water\nfloat or np.ndarray\nDichtheid water (volumiek gewicht water) [kN/m^3].\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\n\n\nv\nfloat or np.ndarray\nKinematische viscositeit [m^2/s]\n\n\ngamma_sp\nfloat or np.ndarray\nVolumieke dichtheid zand onder water [kN/m^3]\n\n\nkrit_verval_factor\nfloat or np.ndarray\nVermenigvuldigingsfactor voor kritiek verval, by default 1.0.\n\n\nm_p\nfloat or np.ndarray\nModelfactor piping [-].\n\n\nmethode_stijghoogte\nstr\nStijghoogte methode, by default “responsfactor”"
  },
  {
    "objectID": "reference/PipingSettings.html#methods",
    "href": "reference/PipingSettings.html#methods",
    "title": "PipingSettings",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncopy\nCreate a copy of the current PipingSettings object.\n\n\nget_partial_settings\nGet a partial settings object for the i-th slice.\n\n\nget_settings_as_dict\nGet the settings as a dictionary.\n\n\nset_param\nSet a single parameter.\n\n\nset_params_fromdict\nSet parameters from a dictionary.\n\n\nverify_integrity\nVerify the integrity of the parameters by ensuring they are numpy arrays and have consistent sizes.\n\n\n\n\n\nPipingSettings.copy(verify_integrity=True)\nCreate a copy of the current PipingSettings object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after copying, by default True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPipingSettings\nA new instance of PipingSettings with copied parameters.\n\n\n\n\n\n\n\nPipingSettings.get_partial_settings(i, verify_integrity=True)\nGet a partial settings object for the i-th slice.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ni\nint\nThe index of the slice to extract.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after extraction, by default True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPipingSettings\nA new instance of PipingSettings with the i-th slice of parameters.\n\n\n\n\n\n\n\nPipingSettings.get_settings_as_dict()\nGet the settings as a dictionary.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nA dictionary containing the parameter names and their values.\n\n\n\n\n\n\n\nPipingSettings.set_param(attr, val, verify_integrity=True)\nSet a single parameter.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nattr\nstr\nThe name of the attribute to set.\nrequired\n\n\nval\nfloat or np.ndarray\nThe value to set for the attribute.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after setting them, by default True.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the attribute name is unknown.\n\n\n\n\n\n\n\nPipingSettings.set_params_fromdict(piping_dict, verify_integrity=True)\nSet parameters from a dictionary.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npiping_dict\ndict\nDictionary containing parameter names and their values.\nrequired\n\n\nverify_integrity\nbool\nWhether to verify the integrity of the parameters after setting them, by default True.\nTrue\n\n\n\n\n\n\n\nPipingSettings.verify_integrity()\nVerify the integrity of the parameters by ensuring they are numpy arrays and have consistent sizes.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf any parameter has more than one dimension."
  },
  {
    "objectID": "reference/PipingEquations.html",
    "href": "reference/PipingEquations.html",
    "title": "PipingEquations",
    "section": "",
    "text": "PipingEquations()\nA class containing various static and class methods for performing piping calculations.\n\n\n\n\n\nName\nDescription\n\n\n\n\nF_geo\nFactor geo.\n\n\nF_res\nFactor resistance.\n\n\nF_scale\nFactor scale.\n\n\nH_c\nKritieke verval.\n\n\nZ_all\nOverkoepelende grenstoestandsfunctie piping voor alle deelfaalmechanismen.\n\n\nZ_h\nGrenstoestandsfunctie heave.\n\n\nZ_p\nGrenstoestandsfunctie sellmeijer.\n\n\nZ_u\nGrenstoestandsfunctie uplift.\n\n\ndelta_phi_cu\nHet kritieke stijghoogteverschil voor opbarsten.\n\n\nphi_exit\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\nsf_h\nVeiligheidsfactor heave.\n\n\nsf_p\nVeiligheidsfactor sellmeijer.\n\n\nsf_u\nVeiligheidsfactor uplift.\n\n\nstijghoogte\nGenerieke stijghoogte berekening.\n\n\nstijghoogte_responsfactor\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\nverval\nBerekening van het verval.\n\n\n\n\n\nPipingEquations.F_geo(settings)\nFactor geo.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor geo.\n\n\n\n\n\n\n\nPipingEquations.F_res(settings)\nFactor resistance.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor resistance.\n\n\n\n\n\n\n\nPipingEquations.F_scale(settings)\nFactor scale.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor scale.\n\n\n\n\n\n\n\nPipingEquations.H_c(settings)\nKritieke verval.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nKritieke verval.\n\n\n\n\n\n\n\nPipingEquations.Z_all(settings)\nOverkoepelende grenstoestandsfunctie piping voor alle deelfaalmechanismen.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nOverkoepelende grenstoestandsfunctie.\n\n\n\n\n\n\n\nPipingEquations.Z_h(settings)\nGrenstoestandsfunctie heave.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie heave.\n\n\n\n\n\n\n\nPipingEquations.Z_p(settings)\nGrenstoestandsfunctie sellmeijer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie sellmeijer.\n\n\n\n\n\n\n\nPipingEquations.Z_u(settings)\nGrenstoestandsfunctie uplift.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie uplift.\n\n\n\n\n\n\n\nPipingEquations.delta_phi_cu(settings)\nHet kritieke stijghoogteverschil voor opbarsten.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nKritieke stijghoogteverschil.\n\n\n\n\n\n\n\nPipingEquations.phi_exit(settings)\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\n\n\n\n\n\n\n\nPipingEquations.sf_h(i_ch, phi_exit, h_exit, D_cover)\nVeiligheidsfactor heave.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ni_ch\nfloat or np.ndarray\nKritieke gradient.\nrequired\n\n\nphi_exit\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor heave.\n\n\n\n\n\n\n\nPipingEquations.sf_p(m_p, H_c, h, h_exit, r_c, D_cover)\nVeiligheidsfactor sellmeijer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm_p\nfloat or np.ndarray\nParameter m_p.\nrequired\n\n\nH_c\nfloat or np.ndarray\nKritieke verval.\nrequired\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor sellmeijer.\n\n\n\n\n\n\n\nPipingEquations.sf_u(m_u, delta_phi_cu, phi_exit, h_exit)\nVeiligheidsfactor uplift.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm_u\nfloat or np.ndarray\nParameter m_u.\nrequired\n\n\ndelta_phi_cu\nfloat or np.ndarray\nKritieke stijghoogteverschil.\nrequired\n\n\nphi_exit\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor uplift.\n\n\n\n\n\n\n\nPipingEquations.stijghoogte(h_exit, r_exit, h)\nGenerieke stijghoogte berekening.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_exit\nfloat or np.ndarray\nDempingsfactor bij uitgang [-].\nrequired\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nBerekende stijghoogte.\n\n\n\n\n\n\n\nPipingEquations.stijghoogte_responsfactor(waterstand, settings)\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwaterstand\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\n\n\n\n\n\n\n\nPipingEquations.verval(h, h_exit, r_c, D_cover)\nBerekening van het verval.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nBerekend verval."
  },
  {
    "objectID": "reference/PipingEquations.html#methods",
    "href": "reference/PipingEquations.html#methods",
    "title": "PipingEquations",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nF_geo\nFactor geo.\n\n\nF_res\nFactor resistance.\n\n\nF_scale\nFactor scale.\n\n\nH_c\nKritieke verval.\n\n\nZ_all\nOverkoepelende grenstoestandsfunctie piping voor alle deelfaalmechanismen.\n\n\nZ_h\nGrenstoestandsfunctie heave.\n\n\nZ_p\nGrenstoestandsfunctie sellmeijer.\n\n\nZ_u\nGrenstoestandsfunctie uplift.\n\n\ndelta_phi_cu\nHet kritieke stijghoogteverschil voor opbarsten.\n\n\nphi_exit\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\nsf_h\nVeiligheidsfactor heave.\n\n\nsf_p\nVeiligheidsfactor sellmeijer.\n\n\nsf_u\nVeiligheidsfactor uplift.\n\n\nstijghoogte\nGenerieke stijghoogte berekening.\n\n\nstijghoogte_responsfactor\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\nverval\nBerekening van het verval.\n\n\n\n\n\nPipingEquations.F_geo(settings)\nFactor geo.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor geo.\n\n\n\n\n\n\n\nPipingEquations.F_res(settings)\nFactor resistance.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor resistance.\n\n\n\n\n\n\n\nPipingEquations.F_scale(settings)\nFactor scale.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nFactor scale.\n\n\n\n\n\n\n\nPipingEquations.H_c(settings)\nKritieke verval.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nKritieke verval.\n\n\n\n\n\n\n\nPipingEquations.Z_all(settings)\nOverkoepelende grenstoestandsfunctie piping voor alle deelfaalmechanismen.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nOverkoepelende grenstoestandsfunctie.\n\n\n\n\n\n\n\nPipingEquations.Z_h(settings)\nGrenstoestandsfunctie heave.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie heave.\n\n\n\n\n\n\n\nPipingEquations.Z_p(settings)\nGrenstoestandsfunctie sellmeijer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie sellmeijer.\n\n\n\n\n\n\n\nPipingEquations.Z_u(settings)\nGrenstoestandsfunctie uplift.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nGrenstoestandsfunctie uplift.\n\n\n\n\n\n\n\nPipingEquations.delta_phi_cu(settings)\nHet kritieke stijghoogteverschil voor opbarsten.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nKritieke stijghoogteverschil.\n\n\n\n\n\n\n\nPipingEquations.phi_exit(settings)\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\n\n\n\n\n\n\n\nPipingEquations.sf_h(i_ch, phi_exit, h_exit, D_cover)\nVeiligheidsfactor heave.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ni_ch\nfloat or np.ndarray\nKritieke gradient.\nrequired\n\n\nphi_exit\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor heave.\n\n\n\n\n\n\n\nPipingEquations.sf_p(m_p, H_c, h, h_exit, r_c, D_cover)\nVeiligheidsfactor sellmeijer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm_p\nfloat or np.ndarray\nParameter m_p.\nrequired\n\n\nH_c\nfloat or np.ndarray\nKritieke verval.\nrequired\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor sellmeijer.\n\n\n\n\n\n\n\nPipingEquations.sf_u(m_u, delta_phi_cu, phi_exit, h_exit)\nVeiligheidsfactor uplift.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm_u\nfloat or np.ndarray\nParameter m_u.\nrequired\n\n\ndelta_phi_cu\nfloat or np.ndarray\nKritieke stijghoogteverschil.\nrequired\n\n\nphi_exit\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nVeiligheidsfactor uplift.\n\n\n\n\n\n\n\nPipingEquations.stijghoogte(h_exit, r_exit, h)\nGenerieke stijghoogte berekening.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_exit\nfloat or np.ndarray\nDempingsfactor bij uitgang [-].\nrequired\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nBerekende stijghoogte.\n\n\n\n\n\n\n\nPipingEquations.stijghoogte_responsfactor(waterstand, settings)\nStijghoogte in de watervoerende laag bij het uittredepunt.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwaterstand\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nsettings\nPipingSettings\nInstellingen voor piping berekeningen.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nStijghoogte bij het uittredepunt.\n\n\n\n\n\n\n\nPipingEquations.verval(h, h_exit, r_c, D_cover)\nBerekening van het verval.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat or np.ndarray\nBuitenwaterstand [m+NAP].\nrequired\n\n\nh_exit\nfloat or np.ndarray\nKwelslootpeil bij uitgang [m+NAP].\nrequired\n\n\nr_c\nfloat or np.ndarray\nReductiefactor [-].\nrequired\n\n\nD_cover\nfloat or np.ndarray\nDikte deklaag [m].\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat or np.ndarray\nBerekend verval."
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevelSimple.html",
    "href": "reference/ProbPipingFixedWaterlevelSimple.html",
    "title": "ProbPipingFixedWaterlevelSimple",
    "section": "",
    "text": "ProbPipingFixedWaterlevelSimple()\nClass for simple probabilistic piping calculations with a fixed water level.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nfixed_waterlevel_failureprobability\nCalculate the failure probability for a fixed water level.\n\n\nfixed_waterlevel_fragilitycurve\nCalculate the fragility curve for a fixed water level.\n\n\nfixed_waterlevel_semiprob\nPerform semi-probabilistic calculations for a constant water level.\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_failureprobability(\n    prob_input,\n    h=None,\n    settings=None,\n    copula=None,\n    leave=True,\n)\nCalculate the failure probability for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results for uplift, heave, Sellmeijer, and combined mechanisms.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_fragilitycurve(\n    prob_input,\n    hlist=None,\n    settings=None,\n    copula=None,\n)\nCalculate the fragility curve for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nhlist\nlist of float or None\nList of water levels, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nProbResults\nResults of the fragility curve calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_semiprob(\n    prob_input,\n    settings=None,\n    h=None,\n)\nPerform semi-probabilistic calculations for a constant water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\nDataFrame containing the results of the calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.get_FORM_startpoint(\n    distribution,\n    otzfunc,\n    method='slice',\n)\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevelSimple.html#attributes",
    "href": "reference/ProbPipingFixedWaterlevelSimple.html#attributes",
    "title": "ProbPipingFixedWaterlevelSimple",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nmodel_config\nConfigDict\nConfiguration for the pydantic model.\n\n\nprogress\nbool\nFlag to indicate if progress should be shown.\n\n\ndebug\nbool\nFlag to indicate if debug information should be printed.\n\n\nrel_stochasts\nRelevantStochasts\nRelevant stochastic variables for different types of analyses.\n\n\npiping_eq\nPipingEquations\nPiping equations to use for the calculations."
  },
  {
    "objectID": "reference/ProbPipingFixedWaterlevelSimple.html#methods",
    "href": "reference/ProbPipingFixedWaterlevelSimple.html#methods",
    "title": "ProbPipingFixedWaterlevelSimple",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfixed_waterlevel_failureprobability\nCalculate the failure probability for a fixed water level.\n\n\nfixed_waterlevel_fragilitycurve\nCalculate the fragility curve for a fixed water level.\n\n\nfixed_waterlevel_semiprob\nPerform semi-probabilistic calculations for a constant water level.\n\n\nget_FORM_startpoint\nGet the starting point for the FORM analysis.\n\n\nprob_calculation\nPerform a probabilistic calculation.\n\n\nset_calc_options\nSet calculation options for the optimization algorithm.\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_failureprobability(\n    prob_input,\n    h=None,\n    settings=None,\n    copula=None,\n    leave=True,\n)\nCalculate the failure probability for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nUpdated settings and results for uplift, heave, Sellmeijer, and combined mechanisms.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_fragilitycurve(\n    prob_input,\n    hlist=None,\n    settings=None,\n    copula=None,\n)\nCalculate the fragility curve for a fixed water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nhlist\nlist of float or None\nList of water levels, by default None.\nNone\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nProbResults\nResults of the fragility curve calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.fixed_waterlevel_semiprob(\n    prob_input,\n    settings=None,\n    h=None,\n)\nPerform semi-probabilistic calculations for a constant water level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\nsettings\nPipingSettings or None\nPiping settings, by default None.\nNone\n\n\nh\nfloat or None\nWater level, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\nDataFrame containing the results of the calculations.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.get_FORM_startpoint(\n    distribution,\n    otzfunc,\n    method='slice',\n)\nGet the starting point for the FORM analysis.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndistribution\not.ComposedDistribution\nDistribution of the input variables.\nrequired\n\n\notzfunc\not.PythonFunction\nOpenTURNS Python function representing the limit state function.\nrequired\n\n\nmethod\nstr\nMethod to determine the starting point, by default “slice”.\n'slice'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[float]\nStarting point for the FORM analysis.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.prob_calculation(\n    h,\n    z_type,\n    z_func,\n    settings,\n    prob_input,\n    copula=None,\n    leave=True,\n)\nPerform a probabilistic calculation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nh\nfloat\nWater level.\nrequired\n\n\nz_type\nstr\nType of the limit state function.\nrequired\n\n\nz_func\nCallable\nLimit state function.\nrequired\n\n\nsettings\nPipingSettings\nPiping settings.\nrequired\n\n\nprob_input\nProbInput\nProbabilistic input settings.\nrequired\n\n\ncopula\not.Distribution or None\nCopula distribution, by default None.\nNone\n\n\nleave\nbool\nIf True, remove the progress bar, by default True\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[PipingSettings, ProbResult]\nUpdated settings and results.\n\n\n\n\n\n\n\nProbPipingFixedWaterlevelSimple.set_calc_options(optimAlgo, calc_options, debug)\nSet calculation options for the optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptimAlgo\not.AbdoRackwitz or ot.Cobyla or ot.ProbabilitySimulationAlgorithm or ot.DirectionalSampling\nThe optimization algorithm instance to configure.\nrequired\n\n\ncalc_options\ndict of str to float or int\nA dictionary containing the calculation options to set, where keys are option names and values are option values.\nrequired\n\n\ndebug\nbool\nIf True, print debug information about the options being set.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ProbInput.html",
    "href": "reference/ProbInput.html",
    "title": "ProbInput",
    "section": "",
    "text": "ProbInput()\nA class to represent probabilistic input data.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nparams\ndict[str, float | int | str] | None\nDictionary of deterministic parameters.\n\n\nstochasts\ndict[str, object] | None\nDictionary of stochastic distributions.\n\n\ncharvals\ndict[str, float] | None\nDictionary of characteristic values.\n\n\ncalc_options\ndict[str, float | int | str] | None\nDictionary of calculation options.\n\n\nhlist\nlist[float] | None\nList of water levels.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_stochast\nCreate a stochastic distribution.\n\n\nfrom_dataframe\nCreate a ProbInput instance from a pandas DataFrame.\n\n\nvalidate_stdev\nValidate the standard deviation of a stochastic variable.\n\n\n\n\n\nProbInput.create_stochast(dist_type, mu, sigma, shift, afknot_l, afknot_r)\nCreate a stochastic distribution.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndist_type\nstr\nType of the distribution (e.g., “normaal”, “lognormaal”).\nrequired\n\n\nmu\nfloat\nMean value of the distribution.\nrequired\n\n\nsigma\nfloat\nStandard deviation of the distribution.\nrequired\n\n\nshift\nfloat\nShift value of the distribution.\nrequired\n\n\nafknot_l\nfloat\nLeft truncation value.\nrequired\n\n\nafknot_r\nfloat\nRight truncation value.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\not.Distribution or ot.TruncatedDistribution\nCreated distribution.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the distribution type is unknown.\n\n\n\n\n\n\n\nProbInput.from_dataframe(df)\nCreate a ProbInput instance from a pandas DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npd.DataFrame\nDataFrame containing the probabilistic piping input data.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nProbInput\nAn instance of the ProbInput class.\n\n\n\n\n\n\n\nProbInput.validate_stdev(stochast, mean, spread, spread_type, stdev)\nValidate the standard deviation of a stochastic variable.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstochast\nstr\nName of the stochastic variable.\nrequired\n\n\nmean\nfloat\nMean value of the stochastic variable.\nrequired\n\n\nspread\nfloat\nSpread value of the stochastic variable.\nrequired\n\n\nspread_type\nstr\nType of spread (e.g., “standaardafwijking” or “variatiecoefficient”).\nrequired\n\n\nstdev\nfloat\nStandard deviation of the stochastic variable.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the spread and standard deviation are inconsistent."
  },
  {
    "objectID": "reference/ProbInput.html#attributes",
    "href": "reference/ProbInput.html#attributes",
    "title": "ProbInput",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nparams\ndict[str, float | int | str] | None\nDictionary of deterministic parameters.\n\n\nstochasts\ndict[str, object] | None\nDictionary of stochastic distributions.\n\n\ncharvals\ndict[str, float] | None\nDictionary of characteristic values.\n\n\ncalc_options\ndict[str, float | int | str] | None\nDictionary of calculation options.\n\n\nhlist\nlist[float] | None\nList of water levels."
  },
  {
    "objectID": "reference/ProbInput.html#methods",
    "href": "reference/ProbInput.html#methods",
    "title": "ProbInput",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_stochast\nCreate a stochastic distribution.\n\n\nfrom_dataframe\nCreate a ProbInput instance from a pandas DataFrame.\n\n\nvalidate_stdev\nValidate the standard deviation of a stochastic variable.\n\n\n\n\n\nProbInput.create_stochast(dist_type, mu, sigma, shift, afknot_l, afknot_r)\nCreate a stochastic distribution.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndist_type\nstr\nType of the distribution (e.g., “normaal”, “lognormaal”).\nrequired\n\n\nmu\nfloat\nMean value of the distribution.\nrequired\n\n\nsigma\nfloat\nStandard deviation of the distribution.\nrequired\n\n\nshift\nfloat\nShift value of the distribution.\nrequired\n\n\nafknot_l\nfloat\nLeft truncation value.\nrequired\n\n\nafknot_r\nfloat\nRight truncation value.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\not.Distribution or ot.TruncatedDistribution\nCreated distribution.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the distribution type is unknown.\n\n\n\n\n\n\n\nProbInput.from_dataframe(df)\nCreate a ProbInput instance from a pandas DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npd.DataFrame\nDataFrame containing the probabilistic piping input data.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nProbInput\nAn instance of the ProbInput class.\n\n\n\n\n\n\n\nProbInput.validate_stdev(stochast, mean, spread, spread_type, stdev)\nValidate the standard deviation of a stochastic variable.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstochast\nstr\nName of the stochastic variable.\nrequired\n\n\nmean\nfloat\nMean value of the stochastic variable.\nrequired\n\n\nspread\nfloat\nSpread value of the stochastic variable.\nrequired\n\n\nspread_type\nstr\nType of spread (e.g., “standaardafwijking” or “variatiecoefficient”).\nrequired\n\n\nstdev\nfloat\nStandard deviation of the stochastic variable.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the spread and standard deviation are inconsistent."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Probabilistic piping",
    "section": "",
    "text": "This package contains core functionality for probabilistic piping calculations, utilizing OpenTURNS, pandas, numpy and tqdm. Probabilistic piping is developed by HKV and is published under the GNU GPL-3 license."
  },
  {
    "objectID": "examples/notebooks/fixed_waterlevel.html",
    "href": "examples/notebooks/fixed_waterlevel.html",
    "title": "Fixed water level application",
    "section": "",
    "text": "The package contains two classes for fixed water level calculations: ProbPipingFixedWaterlevel and ProbPipingFixedWaterlevelSimple. These two classes both have methods calculating a single failure probability given a water level (fixed_waterlevel_failureprobability()), or for a range of water levels (fixed_waterlevel_fragilitycurve()).\nThe ProbPipingFixedWaterlevelSimple class calculates the three submechanisms of piping (heave, uplift, sellmeijer) separately and combines the failure probabilities of the submechanisms to a combined failure probability (by taking the minimum failure probability of the three submechanims). This is somewhat different than the combi mechanism of ProbPipingFixedWaterlevel, where the minimum of the three submechanisms is taken in the limit state function.\nThe moniker ‘Simple’ has been added to ProbPipingFixedWaterlevelSimple because taking the minimum of the failure probabilities of the submechanims is seen as a simplified approach.\nIn this notebook, a comparison of the two approaches is shown.\nfrom pathlib import Path\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom probabilistic_piping import (\n    ProbInput,\n    ProbPipingFixedWaterlevel,\n    ProbPipingFixedWaterlevelSimple,\n)"
  },
  {
    "objectID": "examples/notebooks/fixed_waterlevel.html#input",
    "href": "examples/notebooks/fixed_waterlevel.html#input",
    "title": "Fixed water level application",
    "section": "Input",
    "text": "Input\nThe same input data as in the introduction is used and converted to the required ProbInput format.\n\ndata_path = Path(\"../../../test/data/full_test.xlsx\")\ndf_input = pd.read_excel(data_path, sheet_name=\"input\", index_col=0, header=0)\ninp_data = ProbInput.from_dataframe(df_input)"
  },
  {
    "objectID": "examples/notebooks/fixed_waterlevel.html#probpipingfixedwaterlevel",
    "href": "examples/notebooks/fixed_waterlevel.html#probpipingfixedwaterlevel",
    "title": "Fixed water level application",
    "section": "ProbPipingFixedWaterlevel",
    "text": "ProbPipingFixedWaterlevel\nFirst, we calculate the failure probability for the given input using the ProbPipingFixedWaterlevel class.\n\nprob = ProbPipingFixedWaterlevel(progress=False)\n_, pc = prob.fixed_waterlevel_fragilitycurve(inp_data, z_type=\"combi\")"
  },
  {
    "objectID": "examples/notebooks/fixed_waterlevel.html#probpipingfixedwaterlevelsimple",
    "href": "examples/notebooks/fixed_waterlevel.html#probpipingfixedwaterlevelsimple",
    "title": "Fixed water level application",
    "section": "ProbPipingFixedWaterlevelSimple",
    "text": "ProbPipingFixedWaterlevelSimple\nThen we calculate the failure probability using the ProbPipingFixedWaterlevelSimple class. Notice that this class returns four results: three submechanism results and one combined result.\n\nprob_simple = ProbPipingFixedWaterlevelSimple(progress=False)\n_, pu, ph, pp, pcs = prob_simple.fixed_waterlevel_fragilitycurve(inp_data)"
  },
  {
    "objectID": "examples/notebooks/fixed_waterlevel.html#visualize",
    "href": "examples/notebooks/fixed_waterlevel.html#visualize",
    "title": "Fixed water level application",
    "section": "Visualize",
    "text": "Visualize\nWe can now visually compare the results of the two approaches. The results are subtly different, but overal comparable.\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(8, 3))\nax1.set_title(\"ProbPipingFixedWaterlevel\")\nax1.plot([r.h for r in pc.results], [r.prob_cond for r in pc.results], label=\"combi\")\nax1.set_xlabel(\"Water level [m]\")\nax1.set_ylabel(\"Failure probability\")\nax1.legend()\n\nwl = [r.h for r in pcs.results]\nax2.set_title(\"ProbPipingFixedWaterlevelSimple\")\nax2.plot(wl, [r.prob_cond for r in pcs.results], label=\"combined\", ls=\":\", zorder=10)\nax2.plot(wl, [r.prob_cond for r in pu.results], label=\"uplift\", lw=3, alpha=0.5)\nax2.plot(wl, [r.prob_cond for r in ph.results], label=\"heave\", lw=3, alpha=0.5)\nax2.plot(wl, [r.prob_cond for r in pp.results], label=\"sellmeijer\", lw=3, alpha=0.5)\nax2.set_xlabel(\"Water level [m]\")\nax2.set_ylabel(\"Failure probability\")\nax2.legend();"
  }
]